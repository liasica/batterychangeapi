// =================================================================================
// This is auto-generated by GoFrame CLI tool only once. Fill this file as you wish.
// =================================================================================

package model

import (
    "battery/app/model/internal"
    "github.com/gogf/gf/os/gtime"
    "github.com/gogf/gf/util/gmeta"
    "math"
)

// GroupSettlementDetail is the golang structure for table group_settlement_detail.
type GroupSettlementDetail internal.GroupSettlementDetail

// Fill with you ideas below.

// 结算状态
const (
    SettlementBilling = iota // 未结算, 计费中
    SettlementSettled        // 已结算
)

type SettlementEntity struct {
    gmeta.Meta `orm:"table:group_settlement_detail" swaggerignore:"true"`

    Id           uint64      `orm:"id,primary"   json:"id"`           // ID
    SettlementId uint64      `orm:"settlementId" json:"settlementId"` // 结算单ID
    ParentId     uint64      `orm:"parentId"     json:"parentId"`     // 上次结算单ID(拆分自)
    State        uint        `orm:"state"        json:"state"`        // 当前状态: 0计费中 1已结算
    UserId       uint64      `orm:"userId"       json:"userId"`       // 用户ID
    GroupId      uint        `orm:"groupId"      json:"groupId"`      // 团队ID
    ComboId      uint        `orm:"comboId"      json:"comboId"`      // 套餐ID
    ComboOrderId uint64      `orm:"comboOrderId" json:"comboOrderId"` // 套餐订单ID
    Ignorance    int         `orm:"ignorance"    json:"ignorance"`    // 是否忽略(若同一天有多次新签退租则计为1天)
    BatteryType  string      `orm:"batteryType"  json:"batteryType"`  // 电池类型
    UnitPrice    float64     `orm:"unitPrice"    json:"unitPrice"`    // 计费单价(每日计费)
    StartDate    *gtime.Time `orm:"startDate"    json:"startDate"`    // 账单开始日期
    CancelDate   *gtime.Time `orm:"cancelDate"   json:"cancelDate"`   // 退租日期
    StopDate     *gtime.Time `orm:"stopDate"     json:"stopDate"`     // 账单结算日期
    SplitAt      *gtime.Time `orm:"splitAt"      json:"splitAt"`      // 账单拆分日

    Combo *Combo `json:"-" orm:"with:id=comboId"` // 套餐包详情
}

// SettlementListItem 账单对账表
type SettlementListItem struct {
    DetailId    uint64  `json:"detailId" bson:"detailId"`       // 当前结账单详细ID
    ComboName   string  `json:"comboName" bson:"comboName"`     // 套餐名称
    BatteryType string  `json:"batteryType" bson:"batteryType"` // 电池型号
    BillDays    uint    `json:"billDays" bson:"billDays"`       // 未结天数
    UnitPrice   float64 `json:"unitPrice" bson:"unitPrice"`     // 计费单价
    Amount      float64 `json:"amount" bson:"amount"`           // 未结金额
    StartDate   string  `json:"startDate" bson:"startDate"`     // 该账单截止日
    StopDate    string  `json:"stopDate" bson:"stopDate"`       // 该账单截止日

    // 临时缓存账单
    NeedSplit bool `json:"-" bson:"splitId"` // 是否需要分割结算单
}

// GetDays 获取截止到今天的天数
// 若退租时间不为空则天数是 退租时间 - 开始时间
func (s *SettlementEntity) GetDays() (days uint) {
    end := gtime.Now()
    if !s.CancelDate.IsZero() {
        end = s.CancelDate
    } else if !s.StopDate.IsZero() {
        end = s.StopDate
    }
    // 计算时长, 例如 2021-01-20到2021-01-23 是4天, 需要加1
    days = uint(math.Ceil(end.Sub(s.StartDate).Hours()/24.0)) + 1
    if days < 0 {
        days = 0
    }
    return
}

// GetExpDays 获取账单到截止日为止的天数
// 返回数据: days天数, needSplit结账时是否需要拆分订单(根据expDate), end最终计算的截止日
func (s *SettlementEntity) GetExpDays(now, expDate *gtime.Time) (days uint, needSplit bool, end *gtime.Time) {
    needSplit = true
    end = expDate
    // 若开始日大于截止日直接返回0
    if s.StartDate.After(expDate) {
        return
    }
    // 若截止日为[今天]或大于[今天]，则强制设置截止日为[昨天]
    if !now.After(expDate.AddDate(0, 0, 1)) {
        end = now.AddDate(0, 0, -1)
    }
    // 若截止日超过退租日期，使用退租日期作为截止日
    if !s.CancelDate.IsZero() && s.CancelDate.AddDate(0, 0, 1).Before(end) {
        end = s.CancelDate
        needSplit = false
    }
    // 计算日期相差，计算结果需要加1
    days = uint(math.Ceil(end.AddDate(0, 0, 1).Sub(s.StartDate).Hours() / 24.0))
    if days < 0 {
        days = 0
    }
    return
}
