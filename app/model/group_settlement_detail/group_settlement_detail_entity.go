// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package group_settlement_detail

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table group_settlement_detail.
type Entity struct {
    Id           uint64      `orm:"id,primary"   json:"id"`             //                                            
    SettlementId uint64      `orm:"settlementId" json:"settlement_id"`  // 结算单ID                                   
    ParentId     uint64      `orm:"parentId"     json:"parent_id"`      // 上次结算单ID(拆分自)                       
    State        uint        `orm:"state"        json:"state"`          // 当前状态: 0计费中 1已结算                  
    UserId       uint64      `orm:"userId"       json:"user_id"`        // 用户ID                                     
    GroupId      uint        `orm:"groupId"      json:"group_id"`       // 团队ID                                     
    ComboId      uint        `orm:"comboId"      json:"combo_id"`       // 套餐ID                                     
    ComboOrderId uint64      `orm:"comboOrderId" json:"combo_order_id"` // 套餐订单ID                                 
    Ignorance    int         `orm:"ignorance"    json:"ignorance"`      // 是否忽略(若同一天有多次新签退租则计为1天)  
    BatteryType  string      `orm:"batteryType"  json:"battery_type"`   // 电池类型                                   
    UnitPrice    float64     `orm:"unitPrice"    json:"unit_price"`     // 计费单价(每日计费)                         
    StartDate    *gtime.Time `orm:"startDate"    json:"start_date"`     // 账单开始日期                               
    CancelDate   *gtime.Time `orm:"cancelDate"   json:"cancel_date"`    // 退租日期                                   
    StopDate     *gtime.Time `orm:"stopDate"     json:"stop_date"`      // 账单结算日期                               
    SplitAt      *gtime.Time `orm:"splitAt"      json:"split_at"`       // 账单拆分日                                 
    CreatedAt    *gtime.Time `orm:"createdAt"    json:"created_at"`     //                                            
    UpdatedAt    *gtime.Time `orm:"updatedAt"    json:"updated_at"`     //                                            
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}