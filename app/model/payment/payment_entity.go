// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package payment

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table payment.
type Entity struct {
    Id           uint64      `orm:"id,primary"   json:"id"`            //                                          
    PayAt        *gtime.Time `orm:"payAt"        json:"pay_at"`        // 支付时间                                 
    RelationId   uint64      `orm:"relationId"   json:"relation_id"`   // 关联ID                                   
    RelationType uint        `orm:"relationType" json:"relation_type"` // 关联类型:  1 购买套餐，2 续费，3 违约金  
    State        uint        `orm:"state"        json:"state"`         // 0 待支付 1 已支付 2 已退款               
    PayType      uint        `orm:"payType"      json:"pay_type"`      // 1 支付宝 2 微信                          
    PayNo        string      `orm:"payNo"        json:"pay_no"`        // 第三方支付流水号                         
    Amount       float64     `orm:"amount"       json:"amount"`        // 支付金额                                 
    No           string      `orm:"no,unique"    json:"no"`            // 支付编号                                 
    UserId       uint64      `orm:"userId"       json:"user_id"`       // 用户ID                                   
    CreatedAt    *gtime.Time `orm:"createdAt"    json:"created_at"`    //                                          
    UpdatedAt    *gtime.Time `orm:"updatedAt"    json:"updated_at"`    //                                          
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
// Deprecated.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// InsertIgnore does "INSERT IGNORE INTO ..." statement for inserting current object into table.
// Deprecated.
func (r *Entity) InsertIgnore() (result sql.Result, err error) {
	return Model.Data(r).InsertIgnore()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
// Deprecated.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
// Deprecated.
func (r *Entity) Update() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Data(r).Where(where, args).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
// Deprecated.
func (r *Entity) Delete() (result sql.Result, err error) {
	where, args, err := gdb.GetWhereConditionOfStruct(r)
	if err != nil {
		return nil, err
	}
	return Model.Where(where, args).Delete()
}